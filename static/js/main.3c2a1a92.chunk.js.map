{"version":3,"sources":["components/Layout/Header.js","components/Layout/Landing.js","components/IncidentUpdateFeed.js","components/DatadogStatus.js","actions/datadogActions.js","actions/types.js","actions/azureActions.js","components/AzureStatus.js","reducers/datadogReducer.js","reducers/azureReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","branding","className","to","defaultProps","Landing","Fragment","Component","IncidentUpdateFeed","incidentUpdateItems","this","incidentUpdates","map","incidentUpdate","key","id","style","textTransform","status","body","format","display_at","DatadogStatus","getDatadogStatus","interval","setInterval","clearInterval","incidentItems","datadogIncidents","slice","incident","created_at","color","name","incident_updates","connect","state","datadog","dispatch","a","axios","get","res","type","payload","data","incidents","parser","require","AzureStatus","updateTableState","items","Array","isArray","length","forEach","item","categories","setState","VMEASTUS","VMEASTUS2","VMNORTHEUROPE","CSEASTUS","CSEASTUS2","CSNORTHEUROPE","AFEASTUS","AFEASTUS2","AFNORTHEUROPE","getAzureStatus","azureInfoContent","azureStatus","azureInfoTable","scope","azure","then","parseString","feedInJson","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c2a1a92.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = props => {\r\n  const { branding } = props;\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n      <div className=\"container\">\r\n        <Link to=\"/\" className=\"navbar-brand\">\r\n          {branding}\r\n        </Link>\r\n        <div>\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/\" className=\"nav-link\">\r\n                <i className=\"fas fa-home\" /> Home\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  branding: 'My App'\r\n};\r\n\r\nHeader.propTypes = {\r\n  branding: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Landing extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1 className=\"display-4 mb-2\">\r\n          <span className=\"text-danger\">StatusPage</span> List\r\n        </h1>\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li className=\"list-group-item\">\r\n            <Link to=\"/azure\" className=\"nav-link\">\r\n              <h2>\r\n                <i className=\"fas fa-arrow-circle-right\" /> Azure\r\n              </h2>\r\n            </Link>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <Link to=\"/datadog\" className=\"nav-link\">\r\n              <h2>\r\n                <i className=\"fas fa-arrow-circle-right\" /> Datadog\r\n              </h2>\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Landing;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Moment from 'react-moment';\r\n\r\nclass IncidentUpdateFeed extends Component {\r\n  render() {\r\n    const { incidentUpdates } = this.props;\r\n    const incidentUpdateItems = incidentUpdates.map(incidentUpdate => (\r\n      <div key={incidentUpdate.id}>\r\n        <p>\r\n          <mark>\r\n            {/* Instyle css to capitalize and highlight the incident status */}\r\n            <b style={{ textTransform: 'capitalize' }}>\r\n              {incidentUpdate.status}\r\n            </b>\r\n          </mark>{' '}\r\n          - {incidentUpdate.body} <br></br>\r\n          <Moment format=\"MMMM Do YYYY, h:mm a\">\r\n            {incidentUpdate.display_at}\r\n          </Moment>\r\n        </p>\r\n      </div>\r\n    ));\r\n\r\n    return <div>{incidentUpdateItems}</div>;\r\n  }\r\n}\r\n\r\nIncidentUpdateFeed.propTypes = {\r\n  incidentUpdates: PropTypes.array.isRequired\r\n};\r\n\r\nexport default IncidentUpdateFeed;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport Moment from 'react-moment';\r\nimport { getDatadogStatus } from '../actions/datadogActions';\r\n\r\nimport IncidentUpdateFeed from './IncidentUpdateFeed';\r\n\r\nclass DatadogStatus extends Component {\r\n  componentDidMount() {\r\n    this.props.getDatadogStatus();\r\n    this.interval = setInterval(() => this.props.getDatadogStatus(), 600000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    const { datadogIncidents } = this.props;\r\n    //Selects first five incidents using slice(0, 5)\r\n    const incidentItems = datadogIncidents.slice(0, 5).map(incident => (\r\n      <div key={incident.id}>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h3>\r\n              <Moment format=\"MMMM Do YYYY, h:mm a\">\r\n                {incident.created_at}\r\n              </Moment>\r\n            </h3>\r\n            <h4 className=\"card-title\" style={{ color: 'orange' }}>\r\n              {incident.name}\r\n            </h4>\r\n            <IncidentUpdateFeed incidentUpdates={incident.incident_updates} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ));\r\n\r\n    return (\r\n      <div>\r\n        <h1 className=\"display-4 mb-2\">Datadog Recent Incidents</h1>\r\n        {incidentItems}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDatadogStatus.propTypes = {\r\n  datadogIncidents: PropTypes.array.isRequired,\r\n  getDatadogStatus: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  datadogIncidents: state.datadog.datadogIncidents\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getDatadogStatus }\r\n)(DatadogStatus);\r\n","import { GET_DATADOG_STATUS } from './types';\r\nimport axios from 'axios';\r\n\r\nexport const getDatadogStatus = () => async dispatch => {\r\n  const res = await axios.get(\r\n    'https://1k6wzpspjf99.statuspage.io/api/v2/incidents.json'\r\n  );\r\n\r\n  dispatch({\r\n    type: GET_DATADOG_STATUS,\r\n    payload: res.data.incidents\r\n  });\r\n};\r\n","export const GET_DATADOG_STATUS = 'GET_DATADOG_STATUS';\r\nexport const GET_AZURE_STATUS = 'GET_AZURE_STATUS';\r\n","import { GET_AZURE_STATUS } from './types';\r\nimport axios from 'axios';\r\n\r\nlet Parser = require('rss-parser');\r\nlet parser = new Parser();\r\n\r\nexport const getAzureStatus = () => async dispatch => {\r\n  //Using CORS proxy to get around “No Access-Control-Allow-Origin header” problems as I cannot change the server side CORS policy\r\n  const proxyurl =\r\n    'https://cors-anywhere.herokuapp.com/' +\r\n    'azure.microsoft.com/en-us/status/feed/';\r\n\r\n  await axios.get(proxyurl).then(res => {\r\n    //Parsing XML RSS feed to JSON format using npm rss-parser\r\n    parser.parseString(res.data).then(feedInJson => {\r\n      dispatch({\r\n        type: GET_AZURE_STATUS,\r\n        payload: feedInJson.items\r\n      });\r\n    });\r\n  });\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { getAzureStatus } from '../actions/azureActions';\r\n\r\nclass AzureStatus extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      VMEASTUS: 'Working',\r\n      VMEASTUS2: 'Working',\r\n      VMNORTHEUROPE: 'Working',\r\n      CSEASTUS: 'Working',\r\n      CSEASTUS2: 'Working',\r\n      CSNORTHEUROPE: 'Working',\r\n      AFEASTUS: 'Working',\r\n      AFEASTUS2: 'Working',\r\n      AFNORTHEUROPE: 'Working'\r\n    };\r\n  }\r\n\r\n  updateTableState = items => {\r\n    if (Array.isArray(items) && items.length) {\r\n      //Checking for Virtual Machines\r\n      items.forEach(item => {\r\n        if (item.categories[0] === 'Virtual Machines') {\r\n          switch (item.categories[1]) {\r\n            case 'EAST US':\r\n              return this.setState({\r\n                VMEASTUS: 'Not Available'\r\n              });\r\n            case 'EAST US 2':\r\n              return this.setState({\r\n                VMEASTUS2: 'Not Available'\r\n              });\r\n            case 'NORTH EUROPE':\r\n              return this.setState({\r\n                VMNORTHEUROPE: 'Not Available'\r\n              });\r\n            default:\r\n              // do nothing;\r\n              break;\r\n          }\r\n        }\r\n        //Checking for cloud services\r\n        if (item.categories[0] === 'Cloud Services') {\r\n          switch (item.categories[1]) {\r\n            case 'EAST US':\r\n              return this.setState({\r\n                CSEASTUS: 'Not Available'\r\n              });\r\n            case 'EAST US 2':\r\n              return this.setState({\r\n                CSEASTUS2: 'Not Available'\r\n              });\r\n            case 'NORTH EUROPE':\r\n              return this.setState({\r\n                CSNORTHEUROPE: 'Not Available'\r\n              });\r\n            default:\r\n              // do nothing;\r\n              break;\r\n          }\r\n        }\r\n        //Checking for azure functions\r\n        if (item.categories[0] === 'Azure Functions') {\r\n          switch (item.categories[1]) {\r\n            case 'EAST US':\r\n              return this.setState({\r\n                AFEASTUS: 'Not Available'\r\n              });\r\n            case 'EAST US 2':\r\n              return this.setState({\r\n                AFEASTUS2: 'Not Available'\r\n              });\r\n            case 'NORTH EUROPE':\r\n              return this.setState({\r\n                AFNORTHEUROPE: 'Not Available'\r\n              });\r\n            default:\r\n              // do nothing;\r\n              break;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.getAzureStatus();\r\n    //Setting interval to refresh make request to api every 10 mins and calls render function again when it receives props\r\n    this.interval = setInterval(() => this.props.getAzureStatus(), 600000);\r\n  }\r\n\r\n  //Resets interval when component unmounts so it wont make api calls\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    const items = this.props.azureStatus;\r\n    this.updateTableState(items);\r\n\r\n    //Info UI\r\n    let azureInfoContent;\r\n    if (Array.isArray(items) && items.length) {\r\n      //array exists and is not empty\r\n      azureInfoContent = <h2>There is problem with some services.</h2>;\r\n    } else {\r\n      azureInfoContent = <h2>All Azure Services are working fine</h2>;\r\n    }\r\n\r\n    //Table UI\r\n    let azureInfoTable = (\r\n      <div className=\"container\">\r\n        <table className=\"table table-bordered table-hover \">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Products & Services</th>\r\n              <th scope=\"col\">East US</th>\r\n              <th scope=\"col\">East US 2</th>\r\n              <th scope=\"col\">North Europe</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <th scope=\"row\">Virtual Machines</th>\r\n              <td>{this.state.VMEASTUS}</td>\r\n              <td>{this.state.VMEASTUS2}</td>\r\n              <td>{this.state.VMNORTHEUROPE}</td>\r\n            </tr>\r\n            <tr>\r\n              <th scope=\"row\">Cloud Services</th>\r\n              <td>{this.state.CSEASTUS}</td>\r\n              <td>{this.state.CSEASTUS2}</td>\r\n              <td>{this.state.CSNORTHEUROPE}</td>\r\n            </tr>\r\n            <tr>\r\n              <th scope=\"row\">Azure Functions</th>\r\n              <td>{this.state.AFEASTUS}</td>\r\n              <td>{this.state.AFEASTUS2}</td>\r\n              <td>{this.state.AFNORTHEUROPE}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <h1 className=\"display-4 mb-2\">Azure Status</h1>\r\n        {azureInfoContent}\r\n        {azureInfoTable}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAzureStatus.propTypes = {\r\n  azureStatus: PropTypes.array.isRequired,\r\n  getAzureStatus: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  azureStatus: state.azure.azureStatus\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getAzureStatus }\r\n)(AzureStatus);\r\n","import { GET_DATADOG_STATUS } from '../actions/types';\r\n\r\nconst initialState = {\r\n  datadogIncidents: []\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_DATADOG_STATUS:\r\n      return { ...state, datadogIncidents: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { GET_AZURE_STATUS } from '../actions/types';\r\n\r\nconst initialState = {\r\n  azureStatus: []\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_AZURE_STATUS:\r\n      return { ...state, azureStatus: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport datadogReducer from './datadogReducer';\r\nimport azureReducer from './azureReducer';\r\n\r\nexport default combineReducers({\r\n  azure: azureReducer,\r\n  datadog: datadogReducer\r\n});\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers'; //Calls index.js by default from reducers folder\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport Header from './components/Layout/Header';\r\nimport Landing from './components/Layout/Landing';\r\nimport DatadogStatus from './components/DatadogStatus';\r\nimport AzureStatus from './components/AzureStatus';\r\n\r\n//Redux Steup\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Header branding=\"Status Provider\" />\r\n          <div className=\"container\">\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Landing} />\r\n              <Route exact path=\"/azure\" component={AzureStatus} />\r\n              <Route exact path=\"/datadog\" component={DatadogStatus} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}